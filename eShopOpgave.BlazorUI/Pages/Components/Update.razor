@inject IProductAPIServices _productServices


<EditForm Model="@updateProduct" OnValidSubmit="@UpdateProduct">
    <div class="form-group">
        <label>Name:</label>
        <InputText class="form-control mt-3" @bind-Value="updateProduct.title"  />
    </div>
    <div class="form-group">
        <label>Description:</label>
        <InputTextArea class="form-control mt-3" @bind-Value="@updateProduct.description" />
    </div>
    <div class="form-group">
        <label>Price:</label>
        <InputNumber class="form-control mt-3" @bind-Value="@updateProduct.price" />
    </div>
    <div class="form-group">
        <label>Stock:</label>
        <InputNumber class="form-control mt-3" @bind-Value="@updateProduct.stock" />
    </div>
    <div class="form-group">
        <label>Manufacture:</label>
        <InputText class="form-control mt-3" @bind-Value="updateProduct.manufacture" />
    </div>
    @*<div class="form-group">
    <label>Picture:</label>
    <InputFile class="form-control" @bind-Value="@product.imgPath" />
    <ValidationMessage For="@(() => product.imgPath)" />
    </div>*@
    <button type="submit" class="btn btn-primary mt-3" @onclick="UpdateProduct">Update Product</button>
</EditForm>





@code {
    //[Parameter] private int id { get; set; }
    private Item OldItem = new();
    private Item updateProduct = new();

    protected override async Task OnInitializedAsync()
    {
        OldItem = await _productServices.GetProductById(12);
    }      

    private async Task UpdateProduct()
    {
        updateProduct.masterKey = OldItem.masterKey;
        updateProduct.imgPath = "";
        await _productServices.UpdateProduct(updateProduct);
    }

}
